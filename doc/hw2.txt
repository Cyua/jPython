## 在原python语法上去掉了修饰器、lambda表达式、可变传参、断言、生成器、print的重定向、文件操作、exception相关
<single_input>: NEWLINE | <simple_stmt> | <compound_stmt> NEWLINE
<eval_input>: <testlist> NEWLINE* ENDMARKER

<funcdef>: 'def' NAME <parameters> ':' <suite>
<parameters>: '(' [<varargslist>] ')'
#changes 是不是参数传递NAME那里要改一下，也可以直接传递纯数值呀
<varargslist>: ｛<fpdef> ['=' <test>] ','｝ <fpdef> ['=' <test>] ｛',' <fpdef> ['=' <test>]｝
<fpdef>: NAME | '(' <fplist> ')'
<fplist>: <fpdef> {',' <fpdef>} [',']

<stmt>: <simple_stmt> | <compound_stmt>
<simple_stmt>: <small_stmt> {';' <small_stmt>} [';'] NEWLINE
<small_stmt>: (<expr_stmt> | <print_stmt>  | <del_stmt> | <pass_stmt> | <flow_stmt> |
             <import_stmt> | <global_stmt> |<exec_stmt>)
<expr_stmt>: <testlist> (<augassign> (<testlist>) | {'=' (<testlist>)})
<augassign>: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')

# For normal assignments, additional restrictions enforced by the interpreter
<print_stmt>: 'print' ( [ <test> {',' <test>} [','] ] )
<del_stmt>: 'del' <exprlist>
<pass_stmt>: 'pass'
<flow_stmt>: <break_stmt> | <continue_stmt> | <return_stmt> | <raise_stmt>
<break_stmt>: 'break'
<continue_stmt>: 'continue'
<return_stmt>: 'return' [<testlist>]
#raise
<raise_stmt>: 'raise' [<test> [',' <test> [',' <test>]]]
<import_stmt>: <import_name> | <import_from>
<import_name>: 'import' <dotted_as_names>
<import_from>: ('from' ({'.'} <dotted_name> | '.'+)
              'import' ('*' | '(' <import_as_names> ')' | <import_as_names>))
<import_as_name>: NAME ['as' NAME]
<dotted_as_name>: <dotted_name> ['as' NAME]
<import_as_names>: <import_as_name> {',' <import_as_name>} [',']
<dotted_as_names>: <dotted_as_name> {',' dotted_as_name}
<dotted_name>: NAME {'.' NAME}
<global_stmt>: 'global' NAME (',' NAME)*
<exec_stmt>: 'exec' <expr> ['in' <test> [',' <test>]]

<compound_stmt>: <if_stmt> | <while_stmt> | <for_stmt> | <with_stmt> | <funcdef> | <classdef>
<if_stmt>: 'if' <test> ':' <suite> {'elif' <test> ':' <suite>} ['else' ':' <suite>]
<while_stmt>: 'while' <test> ':' <suite> ['else' ':' <suite>]
<for_stmt>: 'for' <exprlist> 'in' <testlist> ':' <suite> ['else' ':' <suite>]
#with_stmt: 'with' with_item (',' with_item)*  ':' suite
#with_item: test ['as' expr]

<suite>: <simple_stmt> | NEWLINE INDENT <stmt>+ DEDENT

# Backward compatibility cruft to support:
# [ x for x in lambda: True, lambda: False if x() ]
# even while also allowing:
# lambda x: 5 if x else 2
# (But not a mix of the two)
<testlist_safe>: <old_test> [(',' <old_test>)+ [',']]
<old_test>: <or_test>

<test>: <or_test> ['if' <or_test> 'else' <test>]
<or_test>: <and_test> {'or' <and_test>}
<and_test>: <not_test> {'and' <not_test>}
#changes
<not_test>: <comparison> | 'not' <not_test> 


<comparison>: expr {comp_op expr}
<comp_op>: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
<expr>: <xor_expr> {'|' <xor_expr>}
<xor_expr>: <and_expr> {'^' <and_expr>}
<and_expr>: <shift_expr> {'&' <shift_expr>}
<shift_expr>: <arith_expr> {('<<'|'>>') <arith_expr>}
<arith_expr>: <term> {('+'|'-') <term>}
<term>: <factor> {('*'|'/'|'%'|'//') <factor>}
<factor>: ('+'|'-'|'~') <factor> | <power>
<power>: <atom> {<trailer>} ['**' factor]
<atom>: ('(' [<testlist_comp>] ')' |#tuple
       '[' [<listmaker>] ']' |#list
       '{' [<dictorsetmaker>] '}' |#dic
       '`' <testlist1> '`' |#?
       NAME | NUMBER | STRING+)
#最后的逗号是？
<listmaker>: <test> ( <list_for> | {',' <test>} [','] )
<testlist_comp>: <test> ( <comp_for> | {',' <test>} [','] )
#去掉lambda
#lambdef: 'lambda' [varargslist] ':' test
#trailer是啥？
<trailer>: '(' [<arglist>] ')' | '[' <subscriptlist> ']' | '.' NAME
<subscriptlist>: <subscript>{',' <subscript>} [',']
#???
<subscript>: '.' '.' '.' | <test> | [<test>] ':' [<test>] [<sliceop>]
<sliceop>: ':' [<test>]
#list的名字
<exprlist>: <expr> {',' <expr>} [',']
<testlist>: <test> {',' test} [',']
<dictorsetmaker>: ( (<test> ':' <test> (<comp_for> | {',' <test> ':' <test>} [','])) |
                  (<test> (<comp_for> | {',' <test>} [','])) )#字典可以不用：？

<classdef>: 'class' NAME ['(' [<testlist>] ')'] ':' <suite>

<arglist>: {<argument> ','} (<argument> [','])

<argument>: <test> [<comp_for>] | <test> '=' <test>

<list_iter>: <list_for> | <list_if>
<list_for>: 'for' <exprlist> 'in' <testlist_safe> [<list_iter>]
<list_if>: 'if' <old_test> [<list_iter>]

<comp_iter>: <comp_for> | <comp_if>
<comp_for>: 'for' <exprlist> 'in' <or_test> [<comp_iter>]
<comp_if>: 'if' <old_test> [<comp_iter>]

<testlist1>: <test> {',' <test>}
